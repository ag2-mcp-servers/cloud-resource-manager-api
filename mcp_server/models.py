# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:16:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class OperationType(Enum):
    OPERATION_TYPE_UNSPECIFIED = 'OPERATION_TYPE_UNSPECIFIED'
    CREATE = 'CREATE'
    MOVE = 'MOVE'


class CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation(BaseModel):
    destinationParent: Optional[str] = Field(
        None,
        description='The resource name of the folder or organization we are either creating the folder under or moving the folder to.',
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the folder.'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The type of this operation.'
    )
    sourceParent: Optional[str] = Field(
        None,
        description="The resource name of the folder's parent. Only applicable when the operation_type is MOVE.",
    )


class CloudresourcemanagerGoogleCloudResourcemanagerV2beta1FolderOperation(BaseModel):
    destinationParent: Optional[str] = Field(
        None,
        description='The resource name of the folder or organization we are either creating the folder under or moving the folder to.',
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the folder.'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The type of this operation.'
    )
    sourceParent: Optional[str] = Field(
        None,
        description="The resource name of the folder's parent. Only applicable when the operation_type is MOVE.",
    )


class CreateFolderMetadata(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The display name of the folder.'
    )
    parent: Optional[str] = Field(
        None,
        description='The resource name of the folder or organization we are creating the folder under.',
    )


class CreateProjectMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Creation time of the project creation workflow.'
    )
    gettable: Optional[bool] = Field(
        None,
        description='True if the project can be retrieved using `GetProject`. No other operations on the project are guaranteed to work until the project creation is complete.',
    )
    ready: Optional[bool] = Field(
        None, description='True if the project creation process is complete.'
    )


class CreateTagBindingMetadata(BaseModel):
    pass


class CreateTagKeyMetadata(BaseModel):
    pass


class CreateTagValueMetadata(BaseModel):
    pass


class DeleteFolderMetadata(BaseModel):
    pass


class DeleteOrganizationMetadata(BaseModel):
    pass


class DeleteProjectMetadata(BaseModel):
    pass


class DeleteTagBindingMetadata(BaseModel):
    pass


class DeleteTagKeyMetadata(BaseModel):
    pass


class DeleteTagValueMetadata(BaseModel):
    pass


class EffectiveTag(BaseModel):
    inherited: Optional[bool] = Field(
        None,
        description="Indicates the inheritance status of a tag value attached to the given resource. If the tag value is inherited from one of the resource's ancestors, inherited will be true. If false, then the tag value is directly attached to the resource, inherited will be false.",
    )
    namespacedTagKey: Optional[str] = Field(
        None,
        description='The namespaced name of the TagKey. Can be in the form `{organization_id}/{tag_key_short_name}` or `{project_id}/{tag_key_short_name}` or `{project_number}/{tag_key_short_name}`.',
    )
    namespacedTagValue: Optional[str] = Field(
        None,
        description='The namespaced name of the TagValue. Can be in the form `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.',
    )
    tagKey: Optional[str] = Field(
        None,
        description='The name of the TagKey, in the format `tagKeys/{id}`, such as `tagKeys/123`.',
    )
    tagKeyParentName: Optional[str] = Field(
        None,
        description='The parent name of the tag key. Must be in the format `organizations/{organization_id}`.',
    )
    tagValue: Optional[str] = Field(
        None, description='Resource name for TagValue in the format `tagValues/456`.'
    )


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    DELETE_REQUESTED = 'DELETE_REQUESTED'


class Folder(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the folder was created.'
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp when the folder was requested to be deleted.',
    )
    displayName: Optional[str] = Field(
        None,
        description="The folder's display name. A folder's display name must be unique amongst its siblings. For example, no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters. This is captured by the regular expression: `[\\p{L}\\p{N}]([\\p{L}\\p{N}_- ]{0,28}[\\p{L}\\p{N}])?`.",
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A checksum computed by the server based on the current value of the folder resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the folder. Its format is `folders/{folder_id}`, for example: "folders/1234".',
    )
    parent: Optional[str] = Field(
        None,
        description="Required. The folder's parent's resource name. Updates to the folder's parent must be performed using MoveFolder.",
    )
    state: Optional[State] = Field(
        None,
        description='Output only. The lifecycle state of the folder. Updates to the state must be performed using DeleteFolder and UndeleteFolder.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the folder was last modified.'
    )


class FolderOperation(BaseModel):
    destinationParent: Optional[str] = Field(
        None,
        description='The resource name of the folder or organization we are either creating the folder under or moving the folder to.',
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the folder.'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The type of this operation.'
    )
    sourceParent: Optional[str] = Field(
        None,
        description="The resource name of the folder's parent. Only applicable when the operation_type is MOVE.",
    )


class ErrorMessageId(Enum):
    ERROR_TYPE_UNSPECIFIED = 'ERROR_TYPE_UNSPECIFIED'
    ACTIVE_FOLDER_HEIGHT_VIOLATION = 'ACTIVE_FOLDER_HEIGHT_VIOLATION'
    MAX_CHILD_FOLDERS_VIOLATION = 'MAX_CHILD_FOLDERS_VIOLATION'
    FOLDER_NAME_UNIQUENESS_VIOLATION = 'FOLDER_NAME_UNIQUENESS_VIOLATION'
    RESOURCE_DELETED_VIOLATION = 'RESOURCE_DELETED_VIOLATION'
    PARENT_DELETED_VIOLATION = 'PARENT_DELETED_VIOLATION'
    CYCLE_INTRODUCED_VIOLATION = 'CYCLE_INTRODUCED_VIOLATION'
    FOLDER_BEING_MOVED_VIOLATION = 'FOLDER_BEING_MOVED_VIOLATION'
    FOLDER_TO_DELETE_NON_EMPTY_VIOLATION = 'FOLDER_TO_DELETE_NON_EMPTY_VIOLATION'
    DELETED_FOLDER_HEIGHT_VIOLATION = 'DELETED_FOLDER_HEIGHT_VIOLATION'


class FolderOperationError(BaseModel):
    errorMessageId: Optional[ErrorMessageId] = Field(
        None, description='The type of operation error experienced.'
    )


class GetPolicyOptions(BaseModel):
    requestedPolicyVersion: Optional[int] = Field(
        None,
        description='Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class Lien(BaseModel):
    createTime: Optional[str] = Field(
        None, description='The creation time of this Lien.'
    )
    name: Optional[str] = Field(
        None,
        description='A system-generated unique identifier for this Lien. Example: `liens/1234abcd`',
    )
    origin: Optional[str] = Field(
        None,
        description="A stable, user-visible/meaningful string identifying the origin of the Lien, intended to be inspected programmatically. Maximum length of 200 characters. Example: 'compute.googleapis.com'",
    )
    parent: Optional[str] = Field(
        None,
        description='A reference to the resource this Lien is attached to. The server will validate the parent against those for which Liens are supported. Example: `projects/1234`',
    )
    reason: Optional[str] = Field(
        None,
        description="Concise user-visible strings indicating why an action cannot be performed on a resource. Maximum length of 200 characters. Example: 'Holds production API key'",
    )
    restrictions: Optional[List[str]] = Field(
        None,
        description="The types of operations which should be blocked as a result of this Lien. Each value should correspond to an IAM permission. The server will validate the permissions against those for which Liens are supported. An empty list is meaningless and will be rejected. Example: ['resourcemanager.projects.delete']",
    )


class ListEffectiveTagsResponse(BaseModel):
    effectiveTags: Optional[List[EffectiveTag]] = Field(
        None,
        description='A possibly paginated list of effective tags for the specified resource.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Pagination token. If the result set is too large to fit in a single response, this token is returned. It encodes the position of the current result cursor. Feeding this value into a new list request with the `page_token` parameter gives the next page of the results. When `next_page_token` is not filled in, there is no next page and the list returned is the last page in the result set. Pagination tokens have a limited lifetime.',
    )


class ListFoldersResponse(BaseModel):
    folders: Optional[List[Folder]] = Field(
        None,
        description='A possibly paginated list of folders that are direct descendants of the specified parent resource.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token returned from a previous call to `ListFolders` that indicates from where listing should continue.',
    )


class ListLiensResponse(BaseModel):
    liens: Optional[List[Lien]] = Field(None, description='A list of Liens.')
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class MoveFolderMetadata(BaseModel):
    destinationParent: Optional[str] = Field(
        None,
        description='The resource name of the folder or organization to move the folder to.',
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the folder.'
    )
    sourceParent: Optional[str] = Field(
        None, description="The resource name of the folder's parent."
    )


class MoveFolderRequest(BaseModel):
    destinationParent: Optional[str] = Field(
        None,
        description="Required. The resource name of the folder or organization which should be the folder's new parent. Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.",
    )


class MoveProjectMetadata(BaseModel):
    pass


class MoveProjectRequest(BaseModel):
    destinationParent: Optional[str] = Field(
        None, description='Required. The new parent to move the Project under.'
    )


class Organization(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the Organization was created.'
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp when the Organization was requested for deletion.',
    )
    directoryCustomerId: Optional[str] = Field(
        None,
        description='Immutable. The G Suite / Workspace customer id used in the Directory API.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Output only. A human-readable string that refers to the organization in the Google Cloud Console. This string is set by the server and cannot be changed. The string will be set to the primary domain (for example, "google.com") of the Google Workspace customer that owns the organization.',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A checksum computed by the server based on the current value of the Organization resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the organization. This is the organization\'s relative path in the API. Its format is "organizations/[organization_id]". For example, "organizations/1234".',
    )
    state: Optional[State] = Field(
        None, description="Output only. The organization's current lifecycle state."
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp when the Organization was last modified.',
    )


class Project(BaseModel):
    createTime: Optional[str] = Field(None, description='Output only. Creation time.')
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. The time at which this resource was requested for deletion.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Optional. A user-assigned display name of the project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project`',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A checksum computed by the server based on the current value of the Project resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. The labels associated with this project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: \\[a-z\\](\\[-a-z0-9\\]*\\[a-z0-9\\])?. Label values must be between 0 and 63 characters long and must conform to the regular expression (\\[a-z\\](\\[-a-z0-9\\]*\\[a-z0-9\\])?)?. No more than 64 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: `"myBusinessDimension" : "businessValue"`',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The unique resource name of the project. It is an int64 generated number prefixed by "projects/". Example: `projects/415104041262`',
    )
    parent: Optional[str] = Field(
        None,
        description='Optional. A reference to a parent Resource. eg., `organizations/123` or `folders/876`.',
    )
    projectId: Optional[str] = Field(
        None,
        description='Immutable. The unique, user-assigned id of the project. It must be 6 to 30 lowercase ASCII letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123`',
    )
    state: Optional[State] = Field(
        None, description='Output only. The project lifecycle state.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time this resource was modified.',
    )


class ProjectCreationStatus(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Creation time of the project creation workflow.'
    )
    gettable: Optional[bool] = Field(
        None,
        description='True if the project can be retrieved using GetProject. No other operations on the project are guaranteed to work until the project creation is complete.',
    )
    ready: Optional[bool] = Field(
        None, description='True if the project creation process is complete.'
    )


class SearchFoldersResponse(BaseModel):
    folders: Optional[List[Folder]] = Field(
        None,
        description='A possibly paginated folder search results. the specified parent resource.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token returned from a previous call to `SearchFolders` that indicates from where searching should continue.',
    )


class SearchOrganizationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token to be used to retrieve the next page of results. If the result is too large to fit within the page size specified in the request, this field will be set with a token that can be used to fetch the next page of results. If this field is empty, it indicates that this response contains the last page of results.',
    )
    organizations: Optional[List[Organization]] = Field(
        None,
        description='The list of Organizations that matched the search query, possibly paginated.',
    )


class SearchProjectsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Pagination token. If the result set is too large to fit in a single response, this token is returned. It encodes the position of the current result cursor. Feeding this value into a new list request with the `page_token` parameter gives the next page of the results. When `next_page_token` is not filled in, there is no next page and the list returned is the last page in the result set. Pagination tokens have a limited lifetime.',
    )
    projects: Optional[List[Project]] = Field(
        None,
        description='The list of Projects that matched the list filter query. This list can be paginated.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TagBinding(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Output only. The name of the TagBinding. This is a String of the form: `tagBindings/{full-resource-name}/{tag-value-name}` (e.g. `tagBindings/%2F%2Fcloudresourcemanager.googleapis.com%2Fprojects%2F123/tagValues/456`).',
    )
    parent: Optional[str] = Field(
        None,
        description='The full resource name of the resource the TagValue is bound to. E.g. `//cloudresourcemanager.googleapis.com/projects/123`',
    )
    tagValue: Optional[str] = Field(
        None,
        description='The TagValue of the TagBinding. Must be of the form `tagValues/456`.',
    )
    tagValueNamespacedName: Optional[str] = Field(
        None,
        description='The namespaced name for the TagValue of the TagBinding. Must be in the format `{parent_id}/{tag_key_short_name}/{short_name}`. For methods that support TagValue namespaced name, only one of tag_value_namespaced_name or tag_value may be filled. Requests with both fields will be rejected.',
    )


class TagHold(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time this TagHold was created.'
    )
    helpLink: Optional[str] = Field(
        None,
        description='Optional. A URL where an end user can learn more about removing this hold. E.g. `https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing`',
    )
    holder: Optional[str] = Field(
        None,
        description='Required. The name of the resource where the TagValue is being used. Must be less than 200 characters. E.g. `//compute.googleapis.com/compute/projects/myproject/regions/us-east-1/instanceGroupManagers/instance-group`',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of a TagHold. This is a String of the form: `tagValues/{tag-value-id}/tagHolds/{tag-hold-id}` (e.g. `tagValues/123/tagHolds/456`). This resource name is generated by the server.',
    )
    origin: Optional[str] = Field(
        None,
        description='Optional. An optional string representing the origin of this request. This field should include human-understandable information to distinguish origins from each other. Must be less than 200 characters. E.g. `migs-35678234`',
    )


class Purpose(Enum):
    PURPOSE_UNSPECIFIED = 'PURPOSE_UNSPECIFIED'
    GCE_FIREWALL = 'GCE_FIREWALL'


class TagKey(BaseModel):
    createTime: Optional[str] = Field(None, description='Output only. Creation time.')
    description: Optional[str] = Field(
        None,
        description='Optional. User-assigned description of the TagKey. Must not exceed 256 characters. Read-write.',
    )
    etag: Optional[str] = Field(
        None,
        description='Optional. Entity tag which users can pass to prevent race conditions. This field is always set in server responses. See UpdateTagKeyRequest for details.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name for a TagKey. Must be in the format `tagKeys/{tag_key_id}`, where `tag_key_id` is the generated numeric id for the TagKey.',
    )
    namespacedName: Optional[str] = Field(
        None, description='Output only. Immutable. Namespaced name of the TagKey.'
    )
    parent: Optional[str] = Field(
        None,
        description="Immutable. The resource name of the TagKey's parent. A TagKey can be parented by an Organization or a Project. For a TagKey parented by an Organization, its parent must be in the form `organizations/{org_id}`. For a TagKey parented by a Project, its parent can be in the form `projects/{project_id}` or `projects/{project_number}`.",
    )
    purpose: Optional[Purpose] = Field(
        None,
        description='Optional. A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag. A purpose does not grant a policy engine exclusive rights to the Tag, and it may be referenced by other policy engines. A purpose cannot be changed once set.',
    )
    purposeData: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Purpose data corresponds to the policy system that the tag is intended for. See documentation for `Purpose` for formatting of this field. Purpose data cannot be changed once set.',
    )
    shortName: Optional[str] = Field(
        None,
        description='Required. Immutable. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace. The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.',
    )
    updateTime: Optional[str] = Field(None, description='Output only. Update time.')


class TagValue(BaseModel):
    createTime: Optional[str] = Field(None, description='Output only. Creation time.')
    description: Optional[str] = Field(
        None,
        description='Optional. User-assigned description of the TagValue. Must not exceed 256 characters. Read-write.',
    )
    etag: Optional[str] = Field(
        None,
        description='Optional. Entity tag which users can pass to prevent race conditions. This field is always set in server responses. See UpdateTagValueRequest for details.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. Resource name for TagValue in the format `tagValues/456`.',
    )
    namespacedName: Optional[str] = Field(
        None,
        description='Output only. The namespaced name of the TagValue. Can be in the form `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.',
    )
    parent: Optional[str] = Field(
        None,
        description="Immutable. The resource name of the new TagValue's parent TagKey. Must be of the form `tagKeys/{tag_key_id}`.",
    )
    shortName: Optional[str] = Field(
        None,
        description='Required. Immutable. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey. The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.',
    )
    updateTime: Optional[str] = Field(None, description='Output only. Update time.')


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class UndeleteFolderMetadata(BaseModel):
    pass


class UndeleteFolderRequest(BaseModel):
    pass


class UndeleteOrganizationMetadata(BaseModel):
    pass


class UndeleteProjectMetadata(BaseModel):
    pass


class UndeleteProjectRequest(BaseModel):
    pass


class UpdateFolderMetadata(BaseModel):
    pass


class UpdateProjectMetadata(BaseModel):
    pass


class UpdateTagKeyMetadata(BaseModel):
    pass


class UpdateTagValueMetadata(BaseModel):
    pass


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GetIamPolicyRequest(BaseModel):
    options: Optional[GetPolicyOptions] = Field(
        None,
        description='OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.',
    )


class ListProjectsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Pagination token. If the result set is too large to fit in a single response, this token is returned. It encodes the position of the current result cursor. Feeding this value into a new list request with the `page_token` parameter gives the next page of the results. When `next_page_token` is not filled in, there is no next page and the list returned is the last page in the result set. Pagination tokens have a limited lifetime.',
    )
    projects: Optional[List[Project]] = Field(
        None,
        description='The list of Projects under the parent. This list can be paginated.',
    )


class ListTagBindingsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Pagination token. If the result set is too large to fit in a single response, this token is returned. It encodes the position of the current result cursor. Feeding this value into a new list request with the `page_token` parameter gives the next page of the results. When `next_page_token` is not filled in, there is no next page and the list returned is the last page in the result set. Pagination tokens have a limited lifetime.',
    )
    tagBindings: Optional[List[TagBinding]] = Field(
        None,
        description='A possibly paginated list of TagBindings for the specified resource.',
    )


class ListTagHoldsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Pagination token. If the result set is too large to fit in a single response, this token is returned. It encodes the position of the current result cursor. Feeding this value into a new list request with the `page_token` parameter gives the next page of the results. When `next_page_token` is not filled in, there is no next page and the list returned is the last page in the result set. Pagination tokens have a limited lifetime.',
    )
    tagHolds: Optional[List[TagHold]] = Field(
        None, description='A possibly paginated list of TagHolds.'
    )


class ListTagKeysResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token returned from a previous call to `ListTagKeys` that indicates from where listing should continue.',
    )
    tagKeys: Optional[List[TagKey]] = Field(
        None,
        description='List of TagKeys that live under the specified parent in the request.',
    )


class ListTagValuesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token returned from a previous call to `ListTagValues` that indicates from where listing should continue. This is currently not used, but the server may at any point start supplying a valid token.',
    )
    tagValues: Optional[List[TagValue]] = Field(
        None,
        description='A possibly paginated list of TagValues that are direct descendants of the specified parent TagKey.',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )
